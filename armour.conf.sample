# ------------------------------------------------------------------------------------------------
# armour.tcl v3.4.5 - 2020.02.01
# ------------------------------------------------------------------------------------------------
#
#    _                         ___ ___ 
#   /_\  _ _ _ __  ___ _  _ _ |_ _| _ \
#  / _ \| '_| '  \/ _ \ || | '_| ||  _/
# /_/ \_\_| |_|_|_\___/\_,_|_||___|_|  
#
#
# Anti abuse script for eggdrop bots on the Undernet IRC Network
#
# Armour be be placed in one of three modes:
#	ON		:	Automatic scans upon client channel /join
#	SECURE	:	Channel mode +Dm with actions post-scan
#	OFF		:	Manual scans only
#
# ------------------------------------------------------------------------------------------------
# SUPPORTING
# ------------------------------------------------------------------------------------------------
#
# 	whitelists
#	blacklists
#	dnsbl scans	 :	- dnswl exemptions supported
#					- remote 'bounce' bot supported
#	proxy scans	 :	remote 'bounce' bot supported
#	onchan scans :	remote 'bounce' bot supported
#
# ------------------------------------------------------------------------------------------------
# WHITELIST & BLACKLIST TYPES:
# ------------------------------------------------------------------------------------------------
#
#	user	:		authenticated username
#	host	:		hostmask, hostname, IP and CIDR notation accepted
#	regex	:		nick!user@host/rname
#	country	:		geo location ip lookup
#	asn	:			autonomous system number lookup
#	chan	:		onchan #channel
#	rname	:		realname
#
# ------------------------------------------------------------------------------------------------
# WHITELIST ACTIONS:
# ------------------------------------------------------------------------------------------------
#
#	A:	Accept User (exempt scans)
#	O:	Op User
#	V:	Voice User
#
# ------------------------------------------------------------------------------------------------
# BLACKLIST ACTIONS
# ------------------------------------------------------------------------------------------------
#
#	B:	KickBan User
#
# ------------------------------------------------------------------------------------------------
# LIMITATIONS:
# ------------------------------------------------------------------------------------------------
#
#	Armour's automatic scan functions are currently designed to operate in only one channel.
#	IPv6 support for client scans, is still limited.
# 
# ------------------------------------------------------------------------------------------------
#
# Code by		: 	Empus @ Undernet - empus@undernet.org
# Last modified	:	2020.02.01
#
# Please contact me should you need any assistence, but I hope most config options are explanatory.
#
#
# ------------------------------------------------------------------------------------------------





# ------------------------------------------------------------------------------------------------
# GENERAL SETTINGS
# ------------------------------------------------------------------------------------------------


# -- debug level (0-4) [1]
# output shown in partline: .console +d
set arm(debug) "1"

# -- database method (file|sqlite)
set arm(method) "sqlite"

# -- for sqlite, pathname
set arm(sqlite) "./armour/db/sql/EDITME.db"

# -- database file (for whitelists & blacklists)
# -- note: irrelevant if using sqlite
set arm(cfg.db.file) "./armour/db/EDITME.db"

# -- database file for users
# -- note: irrelevant if using sqlite
set arm(cfg.db.users) "./armour/db/EDITME-userdb.db"

# -- save userfile every N mins - [10]
set arm(cfg.db.save) 10

# -- md5 type (md5|md5sum) - [md5]
# - bsd: md5
# - linux: md5sum
set arm(cfg.md5) "md5"

# -- alert users if they don't have a password set? (0|1) - [0]
set arm(cfg.alert.nopass) 1

# -- script prefix dir (without trailing /)
set arm(cfg.dir.prefix) "/home/armour/bots/armour"

# -- command prefix [arm]
set arm(prefix) "c"

# -- ircd type [1-2] - [1]
# 1: ircu (Undernet)
# 2: IRCnet
set arm(cfg.ircd) 1

# -- hostname of services - [undernet.org]
set arm(cfg.servicehost) "undernet.org"

# -- regex to determine umode +x registered users
# -- change with care to suit your own network
set arm(cfg.xregex) {([^\.]+)\.users\.undernet\.org}

# -- allow use of nickname (with or without nick completion char :) as control char? (0|1) - [1]
set arm(cfg.char.nick) 1

# -- require table completion char ':' on nickname prefix?  (0|1) - [1]
set arm(cfg.char.tab) 1

# -- allow global prefix char '*'  (0|1) - [0]
set arm(cfg.char.glob) 1

# -- allow command shortcuts? (0|1) - [1]
# k = kick		kb = kickban	b = black
# a = add		v = view		r = rem
# e = exempt	s = stats		t = topic
# o = op		d = deop		u = userlist
set arm(cfg.cmd.short) 1

# -- host hiding regex
set arm(cfg.xhost) "(\[^\.\]+).users.undernet.org"

# -- allow use of nickname (with or without nick completion char :) as control char? (0|1) - [1]
set arm(cfg.char.nick) 1

# -- require tab completion char ':' on nickname prefix?  (0|1) - [1]
set arm(cfg.char.tab) 0

# -- allow global prefix char '*'  (0|1) - [0]
set arm(cfg.char.glob) 1

# -- allow command shortcuts? (0|1) - [1]
# k = kick              kb = kickban            b = black
# a = add               v = view                r = rem
# e = exempt            s = stats               t = topic
# o = op                d = deop                u = userlist
set arm(cfg.cmd.short) 1

# -- default mode on load? (on|off|secure) - [on]
set arm(mode) "on"

# -- send help and syntax responses from public commands via /notice? (0|1) - [0]
set arm(cfg.help.notc) 0

# -- stack voice modes when in secure mode? - [0|1]
# -- this will slow down voicing of new users, by the time set in arm(cfg.stack.secs)
set arm(cfg.stackvoice) 1

# -- stackvoice timer (secs) - [5]
set arm(cfg.stack.secs) 5

# -- default whitelist reason - [regular]
set arm(cfg.def.wreason) "regular"

# -- default blacklist reason - [abuse]
set arm(cfg.def.breason) "abuse"

# -- auto add blacklist entries on floodnet?
set arm(cfg.auto.black) 1

# -- netsplit memory timeout (mins) - [60]
set arm(cfg.split.mem) 60

# -- add automatic blacklist host entry upon g-line? (0|1) - [1]
set arm(cfg.gline.auto) 1

# -- required G-Line reason mask for above to apply (wildcards) - [*]
set arm(cfg.gline.mask) "*"

# -- mask for which G-Lines do NOT add blacklist entry (wildcard) - [AUTO *]
set arm(cfg.gline.nomask) "G-lined (AUTO *"

# -- realname
set realname "Armour [lindex $arm(version) 0]"

# -- lockdown eggdrop dcc commands? (0|1) - [1]
set arm(cfg.lockegg) 1

# -- if locked egg, what flag is required for all commands? - [n]
set arm(cfg.lockegg.flag) "n"

# -- default temporary exemptions last for how long? (mins) - [5]
# - via 'exempt' command, time can be overriden
set arm(cfg.exempt.time) 5



# ------------------------------------------------------------------------------------------------
# CHANNEL SETTINGS
# ------------------------------------------------------------------------------------------------


# -- auto onjoin scan chan (only one chan)
set arm(cfg.chan.auto) "EDITMECHAN"

# --- channels to operate on. comma separated
# -- command chan (comma delimited)
set arm(cfg.chan.valid) "EDITMECHAN,#armour"

# -- autologin chan list
# - for periodic /who check of channel (leave blank to disable)
set arm(cfg.chan.login) "EDITMECHAN"

# -- autologin /who cycle (secs) - [20]
# - only if enabled above
set arm(cfg.autologin.cycle) 30

# -- default command chan (for applicable privmsg & dcc commands)
set arm(cfg.chan.def) $arm(cfg.chan.auto)

# -- reporting channel (backchan)
set arm(cfg.chan.report) "#armour"

# -- how long to disable floodnet detection after chanmode '+d' (secs) - [60]
# - will be automatically re-enabled on chanmode '-d' anyway
set arm(cfg.time.moded) 60

# -- how many recently joined hostnames to track? (num) - [20]
# - for fast blacklists using type 'last'
set arm(cfg.lasthosts) 20



# ------------------------------------------------------------------------------------------------
# KICKBAN SETTINGS
# ------------------------------------------------------------------------------------------------

# -- how to set channel bans? (chan|x) - [x]
set arm(cfg.ban) "chan"

# -- csc username
# leave blank if login not used or handled in another script
set arm(auth.user) ""

# -- csc password
# leave blank if login not used or handled in another script
set arm(auth.pass) ""

# -- use umode +x? (host hiding) (0|1) - [1]
set arm(auth.hide) 1

# -- how long to set temp bans? - [1h]
set arm(cfg.ban.time) "7d"

# -- autoban on blacklist entry addition? (0|1) - [1]
set arm(cfg.ban.auto) 1

# -- X ban level (if using X) - [100]
set arm(cfg.ban.level) "100"

# -- how long to set temp adaptive regex bans? - [7d]
set arm(cfg.ban.time.adapt) "14d"

# -- how long (secs) to remember 'newcomers' for (for stringent public chatter rules) - [20]
# -- stringent rules apply to newcomers after first joining channel:
# - excessive word repeat
# - profanity (badwords)
# - spam (channels / website)
# - coloured text
set arm(cfg.time.newjoin) "20"

# -- badword masks for public chatter (space delimited with wildcards)
set arm(cfg.badwords) "*fuck* *shit* *cunt* *nigger*"


# ------------------------------------------------------------------------------------------------
# SCANNER SETTINGS
# ------------------------------------------------------------------------------------------------

# -- run blacklist scans on type 'country' when user has resolved ident? - [0]
# -- whitelist scans will always run
set arm(cfg.country.ident) 0

# -- enable dnsbl scans? (0|1) - [1]
set arm(cfg.dnsbl) 1

# -- enable botnet (remote) dnsbl scans? (0|1) - [1]
set arm(cfg.dnsbl.remote) 0

# -- dnsbl, description and score
# - score must be + or - with a score of >0 constituting a hit
array set rbls {
  dnsbl.dronebl.org {{DroneBL} +1.0}
}

# -- enable port scanner? (0|1) [1]
set arm(cfg.portscan) 1

# -- port scan kick reason
set arm(cfg.portscan.reason) "Armour: possible insecure host unintended for IRC -- please install identd"

# -- enable botnet (remote) port scans? (0|1) - [1]
set arm(cfg.portscan.remote) 0

# -- scanports and description
array set scanports {
  21    {ftp}
  22    {ssh}
  23    {telnet}
  25    {smtp}
  80    {www}
  554   {rtsp}
  7070  {realserver}
  31337 {31337/tcp}
  10000 {webmin}
}

# -- minimum port match before action - [1]
set arm(cfg.portscan.min) 1 

# -- enable /whois lookups? (0|1) - [1]
# - note: required for 'chan' list entries
set arm(cfg.whois) 1

# -- show channel name in badchan kick reasons? (0|1) - [1]
set arm(cfg.bchan.reason) 1

# -- enable botnet (remote) /whois lookups? (0|1) - [1]
# - not required, but lowers server queue to improve response time on busy channels
set arm(cfg.whois.remote) 0

# -- if any scanner enabled, scan all? (1) or only unresolved idents? (0) - [0]
set arm(cfg.scans.all) 0

# -- botnet nick of remote bots, if enabled above
# -- ensure this bot is connected to botnet
set arm(cfg.bot.remote.dnsbl) "remote-bot"
set arm(cfg.bot.remote.port) "remote-bot"
set arm(cfg.bot.remote.whois) "remote-bot"


# ------------------------------------------------------------------------------------------------
# ADAPTIVE REGEX
# ------------------------------------------------------------------------------------------------

# -- enable adaptive regex onjoin? - [1]
set arm(cfg.adapt) 1

# -- adaptive regex types on join? (space delimited) - [n i]
# n	: nickname
# ni	: nick!ident
# i	: ident
set arm(cfg.adapt.types.join) "n i ni"

# -- adaptive regex types after /who (space delimited) - [r]
# -- used in secure mode or once rname known
# n	: nickname
# ni	: nick!ident
# nir	: nick!ident/rname
# nr	: nick/rname
# i	: ident
# ir	: ident/rname
# r	: rname
set arm(cfg.adapt.types.who) "nir nr r"

# -- match explicit rname in adaptive regex? (0|1) - [1]
# -- ie. match only common realnames? (1) -- or likeness patterns? (0) - [1]
set arm(cfg.adapt.explicit) 1

# -- adaptive regex max join rate (clients:seconds:retain) - [2:3:15]
# clients: client joins
# seconds: .. in N seconds
# retain: & retain common pattern for N seconds (for further joins)
set arm(cfg.adapt.rate) "2:2:5"


# ------------------------------------------------------------------------------------------------
# REPORT SETTINGS
# ------------------------------------------------------------------------------------------------

# -- send user notices for whitelist entries? (0|1) - [0]
set arm(cfg.notc.white) 0

# -- send user notices for blacklist entries? (0|1) - [0]
set arm(cfg.notc.black) 0

# -- send op notices for whitelist entries? (0|1) - [1]
set arm(cfg.opnotc.white) 0

# -- send op notices for blacklist entries? (0|1) - [1]
set arm(cfg.opnotc.black) 1

# -- send debug chan notices for whitelist entries? (0|1) - [1]
set arm(cfg.dnotc.white) 1

# -- send debug chan notices for blacklist entries? (0|1) - [1]
set arm(cfg.dnotc.black) 1


# ------------------------------------------------------------------------------------------------
# CUSTOM QUEUE SETTINGS
# ------------------------------------------------------------------------------------------------

# -- custom kick queue cycle (secs) - [5]
set arm(cfg.queue.kick) "5"

# -- custom ban queue cycle (secs) - [1]
set arm(cfg.queue.ban) "1"

# -- custom flood queue (miliseconds) - [500]
set arm(cfg.queue.flud) 500


# ------------------------------------------------------------------------------------------------
# FLOODNET SETTINGS
# ------------------------------------------------------------------------------------------------

# -- channel lock modes during floodnet - [+mr]
set arm(cfg.chanlock.mode) "+mr"

# -- channel lock time expiry (secs) - [5]
# -- note: lock will still only be removed after server queue is cleared (ie. kicks)
set arm(cfg.chanlock.time) "60"


# ------------------------------------------------------------------------------------------------
# EXTERNAL SCRIPT INTEGRATION
# ------------------------------------------------------------------------------------------------

# -- pass user data after negative scans to external scripts with args: nick uhost hand chan
# - space delimited
set arm(cfg.integrate.procs) ""


# ------------------------------------------------------------------------------------------------
# BOT PROTECTION
# ------------------------------------------------------------------------------------------------

# -- list of /silence masks
# - provides server level flood protection
# - leave empty for no /SILENCE
set arm(cfg.silence) "+*!*@* +~*!*@*.users.undernet.org +~*!*@undernet.org +~*!*@172.16.4.0/24"


# ------------------------------------------------------------------------------------------------
# SECURE SETTINGS
# ------------------------------------------------------------------------------------------------

# -- when in mode 'secure'
# - number of clones to mark for manual review (no autovoice) [2]
set arm(cfg.paranoid.clone) 2

# -- when in mode 'secure'
# - server connection time must be older than N seconds for autovoice [10]
set arm(cfg.paranoid.signon) 10


# ------------------------------------------------------------------------------------------------
# DRONEBL
# ------------------------------------------------------------------------------------------------

# -- DroneBL RPC Key (www.dronebl.org)
# - caution: you are responsible for DroneBL submissions with this key
# - allocate access with care 
namespace eval dronebl {
	set rpckey ""
}

# -- level required for DroneBL submission [500]
set arm(cfg.dronebl.lvl) 500

# -- default submission type [17]
set arm(cfg.dronebl.type) 17


# ------------------------------------------------------------------------------------------------
# COMMAND LEVELS
# ------------------------------------------------------------------------------------------------

# -- level requirements for commands

# -- standard command structure
# - to disable a command, comment out line
# - binds:
#	pub:	public channel command
#	msg:	privmsg command
#	dcc:	dcc command
# -------------------------------------------------------------------------------
# command			plugin		level req.	binds
# -------------------------------------------------------------------------------
set addcmd(cmds)		{	arm		1		pub msg dcc	}
set addcmd(help)		{	arm		1		pub msg dcc	}
set addcmd(whois)		{	userdb		1		pub msg dcc	}
set addcmd(verify)		{	userdb		1		pub msg dcc	}
set addcmd(version)		{	arm		1		pub msg dcc	}
set addcmd(view)		{	arm		1		pub msg dcc	}
# -- shortcut
set addcmd(v)			{	arm		1		pub msg dcc	}
set addcmd(stats)		{	arm		1		pub msg dcc	}
set addcmd(status)		{	arm		1		pub msg dcc	}
set addcmd(scan)		{	arm		1		pub msg dcc	}
set addcmd(search)		{	arm		1		pub msg dcc	}
set addcmd(scanrbl)		{	arm		1		pub msg dcc	}
set addcmd(scanport)		{	arm		1		pub msg dcc	}
set addcmd(set)			{	userdb		1		pub msg dcc	}
set addcmd(asn)			{	arm		1		pub msg dcc	}
set addcmd(country)		{	arm		1		pub msg dcc	}
set addcmd(exempt)		{	arm		1		pub msg dcc	}
# -- shortcut
set addcmd(e)			{	arm		1		pub msg dcc	}

set addcmd(mode)		{	arm		100		pub msg dcc	}
set addcmd(add)			{	arm		100		pub msg dcc	}
# -- shortcut
set addcmd(a)			{	arm		100		pub msg dcc	}

set addcmd(rem)			{	arm		100		pub msg dcc	}
# -- shortcut
set addcmd(r)			{	arm		100		pub msg dcc	}

set addcmd(black)		{	arm		100		pub msg dcc	}
# -- shortcut
set addcmd(b)			{	arm		100		pub msg dcc	}

set addcmd(op)			{	arm		100		pub msg dcc	}
set addcmd(deop)		{	arm		100		pub msg dcc	}
set addcmd(voice)		{	arm		100		pub msg dcc	}
set addcmd(devoice)		{	arm		100		pub msg dcc	}
set addcmd(kick)		{	arm		100		pub msg dcc	}
# -- shortcut
set addcmd(k)			{	arm		100		pub msg dcc	}

set addcmd(ban)			{	arm		100		pub msg dcc	}
# -- shortcut
set addcmd(kb)			{	arm		100		pub msg dcc	}

set addcmd(topic)		{	arm		100		pub msg dcc	}
set addcmd(invite)		{	arm		100		pub msg dcc	}
set addcmd(chanscan)		{	arm		200		pub msg dcc	}
set addcmd(adduser)		{	userdb		400		pub msg dcc	}
set addcmd(remuser)		{	userdb		400		pub msg dcc	}
set addcmd(userlist)		{	userdb		400		pub msg dcc	}
set addcmd(moduser)		{	userdb		400		pub msg dcc	}
set addcmd(say)			{	arm		400		pub msg dcc	}
set addcmd(jump)		{	arm		400		pub msg dcc	}
set addcmd(save)		{	arm		450		pub msg dcc	}
set addcmd(load)		{	arm		450		pub msg dcc	}
set addcmd(reload)		{	arm		450		pub msg dcc	}
set addcmd(restart)		{	arm		450		pub msg dcc	}
set addcmd(rehash)		{	arm		450		pub msg dcc	}
set addcmd(do)			{	userdb		500		pub msg dcc	}
set addcmd(die)			{	userdb		500		pub msg dcc	}


# ------------------------------------------------------------------------------------------------
# end of configuration
# ------------------------------------------------------------------------------------------------

set files {

	# -- Armour
	./armour/armour-3.4.4.tcl

	# -- plugins
	./armour/plugins/sk/armdb.tcl				# sqlite3 functions
	#./armour/plugins/sk/usernames.tcl			# usernames plugin
	#./armour/plugins/smsbot.tcl					# smsglobal plugin
	#./armour/plugins/trakka-EDITME.tcl			# trakka plugin
	./armour/plugins/tell.tcl					# tell plugin
	#./armour/plugins/push.tcl					# pushbullet plugin
	#./armour/plugins/dronebl.tcl				# dronebl plugin
	#./armour/plugins/email.tcl					# email plugin
	
	#./armour/plugins/apprelay.tcl				# cservice application relay
	#./armour/plugins/ipr.tcl					# cservice ipr match
	#./armour/plugins/totp.tcl					# cservice TOTP match
	#./armour/plugins/lastlog.tcl				# cservice username lastlog
	#./armour/plugins/brute.tcl					# cservice bruteforce attempts
	#./armour/plugins/usernames/sitestatus.tcl	# cservice sitestatus
	#./armour/plugins/csclive.tcl				# cservice live data
	
}


# -- load the scripts
set data [split $files \n]
foreach script $data {
	# -- only load wanted scripts
	set i [lindex $script 0]
	if {[regexp -- {.tcl$} $i] && [string index $i 0] != "#"} {
			# -- capture any errors to not crash the bot (safety)
			putlog "\[@\] Armour: loading $i ..."
			catch {source $i} error
			if {$error != ""} {
					putloglev d * "\002(Armour load error)\002:$i\: $::errorInfo"
			}
	}
}


putlog "\[@\] Armour $arm(version) Loaded (empus@undernet.org)"

